Spring实战 第三版

P27
什么是mock实现？参考 http://liuzhijun.iteye.com/blog/1512780
verify...times(1)的作用，是验证mock对象是否调用了embark方法，并不关心方法的返回值

P32
面向切面编程（AOP）最好的地方，在于切入点可以完全不知道切面的存在。在例子中，也即BraveKnight不用显式调用Minstrel，而是靠XML文件配置即可
切面装配到切入点的过程，叫做编织（weaving）

P36
Spring容器有两种类型，Bean工厂接口 和 应用上下文接口。前者太低级了，主要讨论后者

P38
这些接口真的实现了吗？不知道……

P50
创建应用对象之间协作关系的行为，通常被称为装配（wiring）

P56
如果静态工厂方法是实例化对象的唯一方法，可以用factory-method属性

P53 & P61
bean 注入值的两种方法：通过构造函数 和 通过setter

P63
面向接口 = 任意实现的类型都通用
面向接口编程 和 依赖注入 协作实现了松耦合

P64
内部bean（inner bean）就是bean中的bean，没有ID（不需要有），不能被其他bean复用

P71
神奇的Spring表达式语言（SpEL）

P76
在XML配置文件中，用>=或<=可能会报错，因为这两个符号在XML中有特殊含义
可以用文本替代方式（textual alternatives），改用ge或le

P86
byType自动装配存在一个局限性，也即如果多个Bean的类型和需要自动装配的属性的类型相匹配，就会抛出异常

P87
constructor自动装配和byType一样，做的是类型匹配，只不过前者是构造器，后者是属性

P89
混合装配可以用于属性，但是不能用于构造器

P91
@Autowired依靠的是类型匹配
假如没有匹配的Bean，或多个匹配的Bean，都会抛出异常
解决方法？
required
@Qualifier可以筛选

P94
@Autowired可以减少Spring XML配置，但是会引入对Spring的特定依赖
标准的Java注解@Inject可以替代@Autowired

P97
@Value的真正魔力，是SpEL表达式

P97
自动装配消除了Spring XML中的<property>和<constructor-arg>元素
自动检测可以进一步消除<bean>元素
方法是扫描注解，当然还可以过滤

P100
Spring基于Java的配置，略过

P105
分布于应用多处的功能，被称为横切关注点（cross-cutting concerns）
面向切面编程（AOP）所作的，就是横切关注点与业务逻辑相分离
依赖注入有助于应用兑现之间的解耦，AOP可以实现横切关注点和它们所影响的对象之间的解耦

P106
AOP的术语
通知（Advice），切面的工作（what和when）
连接点（Joinpoint），应用执行过程中，能够插入切面的一个点
切点（Poincut），通知织入（Weaving）的一个或多个连接点（when）
切面（Aspect），通知和切点的结合
引入（Introduction），向现有的类添加新方法或属性

P109
四种AOP支持，其中：
第一种不介绍了，语句繁琐用的少
第二种就是P122
第三种就是P113
第四种就是P127

P110
Spring只支持方法连接点

P120
AOP不仅可以为对象拥有的方法添加新功能，也可以为对象增加新的方法

P126
@DeclareParents是一个@AspectJ注解，@AspectJ是一个不同于Spring的项目
（其实@AspectJ是Spring AOP的变体）

P109
Spring的依赖注入，在这个例子中，协作了AspectJ的切面注入
写法是很不同的，请注意